---
services:

  nginx:
    networks:
      - nginx
    image: nginx:1.29.0
    container_name: nginx
    restart: unless-stopped
    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 10.0.0.0/24:3000:3000/tcp
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/snippets/:/etc/nginx/snippets/:ro
      - /etc/app/ssl/conf:/etc/letsencrypt:ro

  postgresql:
    networks:
      - postgresql
    image: 'postgres:17'
    container_name: postgresql
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: root
    volumes:
      - '/var/postgresql/data:/var/lib/postgresql/data'
      - './init.sql:/docker-entrypoint-initdb.d/init.sql'
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -h localhost -U $$POSTGRES_USER
      interval: 2s

  keycloak:
    container_name: keycloak
    restart: unless-stopped
    networks:
      - nginx
      - postgresql
    image: quay.io/keycloak/keycloak:26.1.4
    env_file: ./.env
    command: start --verbose

  frontend:
    container_name: frontend
    depends_on:
      postgresql:
        condition: service_started
    networks:
      - nginx
    restart: unless-stopped
    environment:
      NODE_ENV: "production"
    image: ghcr.io/samokopecky/gym-map:main
    command:
      - "serve"
      - "-l"
      - "3000"
      - "-s"
      - "dist/"

  backend:
    container_name: backend
    networks:
      - postgresql
      - nginx
    restart: unless-stopped
    expose:
      - "5000"
    env_file: ./.env
    image: ghcr.io/samokopecky/gym-map-backend:main
    volumes:
      - '/home/debian/app/media/gym-map:/media'
    command:
      - /bin/bash
      - -c
      - |
        ./wait-for.sh -t 10 db:5432 -- echo "wait-for: Postgres DB is ready"
        /app/gym-map --debug

  grafana:
    networks:
      - nginx  
    image: grafana/grafana-oss:latest
    container_name: grafana
    user: 'root:root'
    volumes:
      - /var/grafana:/var/lib/grafana
    restart: unless-stopped

networks:
  postgresql:
  nginx:

